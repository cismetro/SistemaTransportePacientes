// Script para gerenciar as cidades de S√£o Paulo usando API do IBGE
class CidadesSP {
    constructor() {
        this.cidades = [];
        this.selectElement = null;
        this.inputElement = null;
        this.isLoaded = false;
        this.cacheKey = 'cidades_sp_ibge';
        this.cacheExpiry = 24 * 60 * 60 * 1000; // 24 horas em millisegundos
    }

    // Verificar se h√° dados em cache v√°lidos
    getCachedCidades() {
        try {
            const cached = localStorage.getItem(this.cacheKey);
            if (cached) {
                const data = JSON.parse(cached);
                const now = new Date().getTime();
                
                if (now - data.timestamp < this.cacheExpiry) {
                    console.log('üì¶ Usando cidades do cache local (v√°lido por mais ' + 
                        Math.round((this.cacheExpiry - (now - data.timestamp)) / (1000 * 60 * 60)) + ' horas)');
                    return data.cidades;
                } else {
                    console.log('‚è∞ Cache expirado, buscando dados atualizados...');
                    localStorage.removeItem(this.cacheKey);
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Cache inv√°lido, removendo e buscando da API...');
            localStorage.removeItem(this.cacheKey);
        }
        return null;
    }

    // Salvar dados no cache
    setCachedCidades(cidades) {
        try {
            const data = {
                cidades: cidades,
                timestamp: new Date().getTime(),
                total: cidades.length
            };
            localStorage.setItem(this.cacheKey, JSON.stringify(data));
            console.log(`üíæ ${cidades.length} cidades salvas no cache local`);
        } catch (error) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel salvar no cache:', error.message);
        }
    }

    // Carregar as cidades da API do IBGE
    async loadCidades() {
        // Tentar usar cache primeiro
        const cachedCidades = this.getCachedCidades();
        if (cachedCidades && cachedCidades.length > 0) {
            this.cidades = cachedCidades;
            this.isLoaded = true;
            return this.cidades;
        }

        try {
            console.log('üèôÔ∏è Carregando cidades de S√£o Paulo via API IBGE...');
            console.log('üåê URL: https://servicodados.ibge.gov.br/api/v1/localidades/estados/35/municipios');
            
            // Mostrar loading se poss√≠vel
            this.showLoading();
            
            // Fazer request para API do IBGE (Estado de S√£o Paulo = c√≥digo 35)
            const response = await fetch('https://servicodados.ibge.gov.br/api/v1/localidades/estados/35/municipios', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                // Timeout de 10 segundos
                signal: AbortSignal.timeout(10000)
            });
            
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }
            
            const municipios = await response.json();
            
            if (!Array.isArray(municipios) || municipios.length === 0) {
                throw new Error('Dados inv√°lidos recebidos da API');
            }
            
            // Extrair apenas os nomes, ordenar alfabeticamente e remover duplicatas
            this.cidades = [...new Set(municipios.map(municipio => municipio.nome))].sort((a, b) => {
                return a.localeCompare(b, 'pt-BR', { sensitivity: 'base' });
            });
            
            // Salvar no cache
            this.setCachedCidades(this.cidades);
            
            this.isLoaded = true;
            this.hideLoading();
            
            console.log(`‚úÖ ${this.cidades.length} cidades carregadas com sucesso da API IBGE!`);
            console.log(`üìç Primeiras cidades: ${this.cidades.slice(0, 5).join(', ')}...`);
            
            return this.cidades;
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar da API IBGE:', error.message);
            this.hideLoading();
            
            // Fallback: usar lista est√°tica das principais cidades de SP
            console.log('üîÑ Usando lista de fallback com principais cidades...');
            this.cidades = [
			'Adamantina', 'Adolfo', 'Agua√≠', '√Åguas da Prata', '√Åguas de Lind√≥ia',
			'√Åguas de Santa B√°rbara', '√Åguas de S√£o Pedro', 'Agudos', 'Alambari', 'Alfredo Marcondes',
			'Altair', 'Altin√≥polis', 'Alto Alegre', 'Alum√≠nio', '√Ålvares Florence',
			'√Ålvares Machado', '√Ålvaro de Carvalho', 'Alvinl√¢ndia', 'Americana', 'Am√©rico Brasiliense',
			'Am√©rico de Campos', 'Amparo', 'Anal√¢ndia', 'Andradina', 'Angatuba',
			'Anhembi', 'Anhumas', 'Aparecida', 'Aparecida d\'Oeste', 'Apia√≠',
			'Ara√ßariguama', 'Ara√ßatuba', 'Ara√ßoiaba da Serra', 'Aramina', 'Arandu',
			'Arape√≠', 'Araraquara', 'Araras', 'Arco-√çris', 'Arealva',
			'Areias', 'Arei√≥polis', 'Ariranha', 'Artur Nogueira', 'Aruj√°',
			'Asp√°sia', 'Assis', 'Atibaia', 'Auriflama', 'Ava√≠',
			'Avanhandava', 'Avar√©', 'Bady Bassitt', 'Balbinos', 'B√°lsamo',
			'Bananal', 'Bar√£o de Antonina', 'Barbosa', 'Bariri', 'Barra Bonita',
			'Barra do Chap√©u', 'Barra do Turvo', 'Barretos', 'Barrinha', 'Barueri',
			'Bastos', 'Batatais', 'Bauru', 'Bebedouro', 'Bento de Abreu',
			'Bernardino de Campos', 'Bertioga', 'Bilac', 'Birigui', 'Biritiba-Mirim',
			'Boa Esperan√ßa do Sul', 'Bocaina', 'Bofete', 'Boituva', 'Bom Jesus dos Perd√µes',
			'Bom Sucesso de Itarar√©', 'Bor√°', 'Borac√©ia', 'Borborema', 'Borebi',
			'Botucatu', 'Bragan√ßa Paulista', 'Bra√∫na', 'Brejo Alegre', 'Brodowski',
			'Brotas', 'Buri', 'Buritama', 'Buritizal', 'Cabr√°lia Paulista',
			'Cabre√∫va', 'Ca√ßapava', 'Cachoeira Paulista', 'Caconde', 'Cafel√¢ndia',
			'Caiabu', 'Caieiras', 'Caiu√°', 'Cajamar', 'Cajati',
			'Cajobi', 'Cajuru', 'Campina do Monte Alegre', 'Campinas', 'Campo Limpo Paulista',
			'Campos do Jord√£o', 'Campos Novos Paulista', 'Canan√©ia', 'Canas', 'C√¢ndido Mota',
			'C√¢ndido Rodrigues', 'Canitar', 'Cap√£o Bonito', 'Capela do Alto', 'Capivari',
			'Caraguatatuba', 'Carapicu√≠ba', 'Cardoso', 'Casa Branca', 'C√°ssia dos Coqueiros',
			'Castilho', 'Catanduva', 'Catigu√°', 'Cedral', 'Cerqueira C√©sar',
			'Cerquilho', 'Ces√°rio Lange', 'Charqueada', 'Chavantes', 'Clementina',
			'Colina', 'Col√¥mbia', 'Conchal', 'Conchas', 'Cordeir√≥polis',
			'Coroados', 'Coronel Macedo', 'Corumbata√≠', 'Cosm√≥polis', 'Cosmorama',
			'Cotia', 'Cravinhos', 'Cristais Paulista', 'Cruz√°lia', 'Cruzeiro',
			'Cubat√£o', 'Cunha', 'Descalvado', 'Diadema', 'Dirce Reis',
			'Divinol√¢ndia', 'Dobrada', 'Dois C√≥rregos', 'Dolcin√≥polis', 'Dourado',
			'Dracena', 'Duartina', 'Dumont', 'Echapor√£', 'Eldorado',
			'Elias Fausto', 'Elisi√°rio', 'Emba√∫ba', 'Embu das Artes', 'Embu-Gua√ßu',
			'Emilian√≥polis', 'Engenheiro Coelho', 'Esp√≠rito Santo do Pinhal', 'Esp√≠rito Santo do Turvo', 'Estiva Gerbi',
			'Estrela d\'Oeste', 'Estrela do Norte', 'Euclides da Cunha Paulista', 'Fartura', 'Fernando Prestes','Fernand√≥polis', 'Fern√£o', 'Ferraz de Vasconcelos', 'Flora Rica', 'Floreal',
			'Fl√≥rida Paulista', 'Flor√≠nea', 'Franca', 'Francisco Morato', 'Franco da Rocha',
			'Gabriel Monteiro', 'G√°lia', 'Gar√ßa', 'Gast√£o Vidigal', 'Gavi√£o Peixoto',
			'General Salgado', 'Getulina', 'Glic√©rio', 'Guai√ßara', 'Guaimb√™',
			'Gua√≠ra', 'Guapia√ßu', 'Guapiara', 'Guar√°', 'Guara√ßa√≠',
			'Guaraci', 'Guarani d\'Oeste', 'Guarant√£', 'Guararapes', 'Guararema',
			'Guaratinguet√°', 'Guare√≠', 'Guariba', 'Guaruj√°', 'Guarulhos',
			'Guatapar√°', 'Guzol√¢ndia', 'Hercul√¢ndia', 'Holambra', 'Hortol√¢ndia',
			'Iacanga', 'Iacri', 'Iaras', 'Ibat√©', 'Ibir√°',
			'Ibirarema', 'Ibitinga', 'Ibi√∫na', 'Ic√©m', 'Iep√™',
			'Igara√ßu do Tiet√™', 'Igarapava', 'Igarat√°', 'Iguape', 'Ilhabela',
			'Ilha Comprida', 'Ilha Solteira', 'Indaiatuba', 'Indiana', 'Indiapor√£',
			'In√∫bia Paulista', 'Ipaussu', 'Iper√≥', 'Ipe√∫na', 'Ipigu√°',
			'Iporanga', 'Ipu√£', 'Iracem√°polis', 'Irapu√£', 'Irapuru',
			'Itaber√°', 'Itai', 'Itajobi', 'Itaju', 'Itanha√©m',
			'Ita√≥ca', 'Itapecerica da Serra', 'Itapetininga', 'Itapeva', 'Itapevi',
			'Itapira', 'Itapirapu√£ Paulista', 'It√°polis', 'Itaporanga', 'Itapu√≠',
			'Itapura', 'Itaquaquecetuba', 'Itarar√©', 'Itariri', 'Itatiba',
			'Itatinga', 'Itirapina', 'Itirapu√£', 'Itobi', 'Itu',
			'Itupeva', 'Ituverava', 'Jaborandi', 'Jaboticabal', 'Jacare√≠',
			'Jaci', 'Jacupiranga', 'Jaguari√∫na', 'Jales', 'Jambeiro',
			'Jandira', 'Jardin√≥polis', 'Jarinu', 'Ja√∫', 'Jeriquara',
			'Joan√≥polis', 'Jo√£o Ramalho', 'Jos√© Bonif√°cio', 'J√∫lio Mesquita', 'Jumirim',
			'Jundia√≠', 'Junqueir√≥polis', 'Juqui√°', 'Juquitiba', 'Lagoinha',
			'Laranjal Paulista', 'Lav√≠nia', 'Lavrinhas', 'Leme', 'Len√ß√≥is Paulista',
			'Limeira', 'Lind√≥ia', 'Lins', 'Lorena', 'Lourdes',
			'Louveira', 'Luc√©lia', 'Lucian√≥polis', 'Lu√≠s Ant√¥nio', 'Luizi√¢nia',
			'Lup√©rcio', 'Lut√©cia', 'Macatuba', 'Macaubal', 'Maced√¥nia',
			'Magda', 'Mairinque', 'Mairipor√£', 'Manduri', 'Marab√° Paulista',
			'Maraca√≠', 'Marapoama', 'Mari√°polis', 'Mar√≠lia', 'Marin√≥polis',
			'Martin√≥polis', 'Mat√£o', 'Mau√°', 'Mendon√ßa', 'Meridiano',
			'Mes√≥polis', 'Miguel√≥polis', 'Mineiros do Tiet√™', 'Mira Estrela', 'Miracatu',
			'Mirand√≥polis', 'Mirante do Paranapanema', 'Mirassol', 'Mirassol√¢ndia', 'Mococa',
			'Mogi das Cruzes', 'Mogi Gua√ßu', 'Moji Mirim', 'Mombuca', 'Mon√ß√µes',
			'Mongagu√°', 'Monte Alegre do Sul', 'Monte Alto', 'Monte Apraz√≠vel', 'Monte Azul Paulista','Monte Castelo', 'Monte Mor', 'Monteiro Lobato', 'Morro Agudo', 'Morungaba','Motuca', 'Murutinga do Sul', 'Nantes', 'Narandiba', 'Natividade da Serra',
			'Nazar√© Paulista', 'Neves Paulista', 'Nhandeara', 'Nipo√£', 'Nova Alian√ßa',
			'Nova Campina', 'Nova Cana√£ Paulista', 'Nova Castilho', 'Nova Europa', 'Nova Granada','Nova Guataporanga', 'Nova Independ√™ncia', 'Nova Luzit√¢nia', 'Nova Odessa', 'Novais',
			'Novo Horizonte', 'Nuporanga', 'Ocau√ßu', '√ìleo', 'Ol√≠mpia',
			'Onda Verde', 'Oriente', 'Orindi√∫va', 'Orl√¢ndia', 'Osasco',
			'Oscar Bressane', 'Osvaldo Cruz', 'Ourinhos', 'Ouro Verde', 'Ouroeste',
			'Pacaembu', 'Palestina', 'Palmares Paulista', 'Palmeira d\'Oeste', 'Palmital',
			'Panorama', 'Paragua√ßu Paulista', 'Paraibuna', 'Para√≠so', 'Paranapanema',
			'Paranapu√£', 'Parapu√£', 'Pardinho', 'Pariquera-A√ßu', 'Parisi',
			'Patroc√≠nio Paulista', 'Paulic√©ia', 'Paul√≠nia', 'Paulist√¢nia', 'Paulo de Faria',
			'Pederneiras', 'Pedra Bela', 'Pedran√≥polis', 'Pedregulho', 'Pedreira',
			'Pedrinhas Paulista', 'Pedro de Toledo', 'Pen√°polis', 'Pereira Barreto', 'Pereiras',
			'Peru√≠be', 'Piedade', 'Pilar do Sul', 'Pindamonhangaba', 'Pindorama', 
			'Pinhalzinho', 'Piquerobi', 'Piquete', 'Piracaia', 'Piracicaba', 
			'Piraju', 'Piraju√≠', 'Pirangi', 'Pirapora do Bom Jesus', 'Pirapozinho', 
			'Pirassununga', 'Piratininga', 'Pitangueiras', 'Planalto', 'Platina', 
			'Po√°', 'Poloni', 'Pomp√©ia', 'Ponga√≠', 'Pontal', 'Pontalinda', 
			'Pontes Gestal', 'Populina', 'Porangaba', 'Porto Feliz', 'Porto Ferreira', 
			'Potim', 'Potirendaba', 'Pracinha', 'Prad√≥polis', 'Praia Grande', 
			'Prat√¢nia', 'Presidente Alves', 'Presidente Bernardes', 'Presidente Epit√°cio', 
			'Presidente Prudente', 'Presidente Venceslau', 'Promiss√£o', 'Quadra', 
			'Quat√°', 'Queiroz', 'Queluz', 'Quintana', 'Rafard', 'Rancharia', 
			'Reden√ß√£o da Serra', 'Regente Feij√≥', 'Regin√≥polis', 'Registro', 
			'Restinga', 'Ribeira', 'Ribeir√£o Bonito', 'Ribeir√£o Branco', 'Ribeir√£o Corrente', 
			'Ribeir√£o do Sul', 'Ribeir√£o dos √çndios', 'Ribeir√£o Grande', 'Ribeir√£o Pires', 
			'Ribeir√£o Preto', 'Rifaina', 'Rinc√£o', 'Rin√≥polis', 'Rio Claro', 
			'Rio das Pedras', 'Rio Grande da Serra', 'Riol√¢ndia', 'Riversul', 'Rosana', 
			'Roseira', 'Rubi√°cea', 'Rubin√©ia', 'Sabino', 'Sagres', 'Sales', 
			'Sales Oliveira', 'Sales√≥polis', 'Salmour√£o', 'Saltinho', 'Salto', 
			'Salto de Pirapora', 'Salto Grande', 'Sandovalina', 'Santa Ad√©lia', 
			'Santa Albertina', 'Santa B√°rbara d\'Oeste', 'Santa Branca', 'Santa Clara d\'Oeste', 
			'Santa Cruz da Concei√ß√£o', 'Santa Cruz da Esperan√ßa', 'Santa Cruz das Palmeiras', 
			'Santa Cruz do Rio Pardo', 'Santa Ernestina', 'Santa F√© do Sul', 
			'Santa Gertrudes', 'Santa Isabel', 'Santa L√∫cia', 'Santa Maria da Serra', 
			'Santa Mercedes', 'Santa Rita d\'Oeste', 'Santa Rita do Passa Quatro', 
			'Santa Rosa de Viterbo', 'Santa Salete', 'Santana da Ponte Pensa', 
			'Santana de Parna√≠ba', 'Santo Anast√°cio', 'Santo Andr√©', 'Santo Ant√¥nio da Alegria', 
			'Santo Ant√¥nio de Posse', 'Santo Ant√¥nio do Aracangu√°', 'Santo Ant√¥nio do Jardim', 
			'Santo Ant√¥nio do Pinhal', 'Santo Expedito', 'Sant√≥polis do Aguape√≠', 
			'Santos', 'S√£o Bento do Sapuca√≠', 'S√£o Bernardo do Campo', 'S√£o Caetano do Sul', 
			'S√£o Carlos', 'S√£o Francisco', 'S√£o Jo√£o da Boa Vista', 'S√£o Jo√£o das Duas Pontes',
			'S√£o Jo√£o de Iracema','S√£o Jo√£o do Pau dalho','S√£o Joaquim da Barra','S√£o Jos√© da Bela Vista',
			'S√£o Jos√© do Barreiro','S√£o Jos√© do Rio Pardo','S√£o Jos√© do Rio Preto','S√£o Jos√© dos Campos',
			'S√£o Louren√ßo da Serra','S√£o Luiz do Paraitinga','S√£o Manuel','S√£o Miguel','Arcanjo','S√£o Paulo',
			'S√£o Pedro','S√£o Pedro do Turvo','S√£o Roque','S√£o Sebasti√£o','S√£o Sebasti√£o da Grama','S√£o Sim√£o','S√£o Vicente','Sarapu√≠',
			'Sarutai√°','Sebastian√≥polis do Sul','Serra Azul','Serra Negra','Serrana','Sert√£ozinho','Sete  Barras','Sever√≠nia','Silveiras',
			'Socorro','Sorocaba','Sud Mennucci','Sumar√©','Suzan√°polis','Suzano','Tabapu√£','Tabatinga','Tabo√£o da Serra','Taciba','Tagua√≠','Taia√ßu','Tai√∫va',
			'Tamba√∫','Tanabi','Tapira√≠','Tapiratiba','Taquaral','Taquaritinga','Taquarituba','Taquariva√≠',
			'Tarabai','Tarum√£','Tatu√≠','Taubat√©','Tejup√°','Teodoro Sampaio','Terra Roxa','Tiet√™','Timburi',
			'Torre de Pedra','Torrinha','Trabiju','Trememb√©','Tr√™s Fronteiras','Tuiuti','Tup√£','Tupi Paulista',
			'Turi√∫ba','Turmalina','Ubarana','Ubatuba','Ubirajara','Uchoa','Uni√£o Paulista','Ur√¢nia', 'Uru',
			'Urup√™s','Valentim Gentil','Valinhos','Valpara√≠so','Vargem','Vargem Grande do Sul','Vargem Grande Paulista',
			'V√°rzea Paulista','Vera Cruz','Vinhedo','Viradouro','Vista Alegre do Alto','Vit√≥ria Brasil','Votorantim','Votuporanga','Zacarias','Peru√≠be'
            ];
            
            this.isLoaded = true;
            return this.cidades;
        }
    }

    // Mostrar indicador de loading
    showLoading() {
        const container = document.getElementById('destino-container');
        if (container) {
            let loadingDiv = container.querySelector('.loading-cidades');
            if (!loadingDiv) {
                loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading-cidades';
                loadingDiv.innerHTML = 'üîÑ Carregando cidades...';
                loadingDiv.style.cssText = 'color: #4fc9c4; font-size: 0.875rem; margin-bottom: 0.5rem;';
                container.insertBefore(loadingDiv, container.firstChild);
            }
        }
    }

    // Esconder indicador de loading
    hideLoading() {
        const container = document.getElementById('destino-container');
        if (container) {
            const loadingDiv = container.querySelector('.loading-cidades');
            if (loadingDiv) {
                loadingDiv.remove();
            }
        }
    }

    // Criar o select de cidades
    createCidadeSelect(targetElementId, placeholder = 'Selecione a cidade...') {
        const container = document.getElementById(targetElementId);
        if (!container) {
            console.error(`‚ùå Elemento ${targetElementId} n√£o encontrado!`);
            return;
        }

        // Criar o select
        const select = document.createElement('select');
        select.id = `${targetElementId}_select`;
        select.className = 'form-control cidade-select';
        select.style.marginBottom = '0.5rem';

        // Op√ß√£o padr√£o
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = placeholder;
        select.appendChild(defaultOption);

        // Adicionar as cidades
        this.cidades.forEach(cidade => {
            const option = document.createElement('option');
            option.value = cidade;
            option.textContent = cidade;
            select.appendChild(option);
        });

        // Op√ß√£o "Outra cidade"
        const outraOption = document.createElement('option');
        outraOption.value = 'outra';
        outraOption.textContent = 'üèôÔ∏è Outra cidade (digite abaixo)';
        select.appendChild(outraOption);

        // Inserir o select antes do input existente
        const inputElement = container.querySelector('input');
        if (inputElement) {
            this.inputElement = inputElement;
            this.inputElement.placeholder = 'Digite o endere√ßo completo ou selecione uma cidade acima';
            container.insertBefore(select, inputElement);
            
            // Event listener para o select
            select.addEventListener('change', (e) => {
                const selectedValue = e.target.value;
                if (selectedValue && selectedValue !== 'outra') {
                    // Preencher o input com a cidade selecionada
                    this.inputElement.value = selectedValue + ', SP';
                    this.inputElement.focus();
                    // Posicionar cursor no final
                    setTimeout(() => {
                        const length = this.inputElement.value.length;
                        this.inputElement.setSelectionRange(length, length);
                    }, 100);
                } else if (selectedValue === 'outra') {
                    // Limpar e focar no input para digita√ß√£o livre
                    this.inputElement.value = '';
                    this.inputElement.focus();
                    this.inputElement.placeholder = 'Digite o endere√ßo completo da cidade';
                    select.selectedIndex = 0; // Voltar para "Selecione..."
                }
            });

            this.selectElement = select;
            console.log('‚úÖ Select de cidades criado com sucesso!');
        } else {
            console.error('‚ùå Input n√£o encontrado no container!');
        }
    }

    // Inicializar o sistema
    async init(targetElementId, placeholder) {
        console.log('üöÄ Inicializando sistema de cidades...');
        try {
            await this.loadCidades();
            this.createCidadeSelect(targetElementId, placeholder);
            console.log('‚úÖ Sistema de cidades inicializado com sucesso!');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar sistema de cidades:', error);
        }
    }

    // M√©todo para buscar cidade por nome (para autocomplete futuro)
    searchCidade(query) {
        if (!query || query.length < 2) return [];
        
        const queryLower = query.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        return this.cidades.filter(cidade => {
            const cidadeLower = cidade.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
            return cidadeLower.includes(queryLower);
        });
    }

    // Validar se a cidade existe
    isValidCidade(cidade) {
        return this.cidades.some(c => 
            c.toLowerCase() === cidade.toLowerCase()
        );
    }

    // Limpar cache (m√©todo utilit√°rio)
    clearCache() {
        localStorage.removeItem(this.cacheKey);
        console.log('üóëÔ∏è Cache de cidades limpo');
    }

    // For√ßar reload da API
    async forceReload() {
        this.clearCache();
        this.isLoaded = false;
        await this.loadCidades();
        console.log('üîÑ Dados recarregados da API');
    }
}

// Inst√¢ncia global
const cidadesSP = new CidadesSP();

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM carregado - verificando se √© p√°gina de agendamento...');
    
    // Verificar se estamos na p√°gina de agendamento
    const targetElement = document.querySelector('#destino-container');
    if (targetElement) {
        console.log('üéØ P√°gina de agendamento detectada!');
        
        // Aguardar um pouco para garantir que tudo foi carregado
        setTimeout(() => {
            cidadesSP.init('destino-container', 'üèôÔ∏è Selecione a cidade de destino...');
        }, 500);
    } else {
        console.log('‚ÑπÔ∏è N√£o √© uma p√°gina de agendamento, sistema de cidades n√£o ser√° carregado');
    }
});

// Fun√ß√£o para validar formul√°rio (opcional)
function validateDestinoForm() {
    const destinoInput = document.getElementById('destino');
    if (destinoInput && destinoInput.value.trim() === '') {
        // Criar modal customizado em vez de alert
        showCustomAlert('Por favor, selecione uma cidade ou digite o endere√ßo de destino!', 'warning');
        destinoInput.focus();
        return false;
    }
    return true;
}

// Fun√ß√£o para mostrar alerta customizado
function showCustomAlert(message, type = 'info') {
    // Criar modal simples
    const modal = document.createElement('div');
    modal.className = 'custom-alert-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    `;
    
    const alertBox = document.createElement('div');
    alertBox.style.cssText = `
        background: white;
        padding: 2rem;
        border-radius: 0.5rem;
        max-width: 400px;
        text-align: center;
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.2);
    `;
    
    const icon = type === 'warning' ? '‚ö†Ô∏è' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    
    alertBox.innerHTML = `
        <div style="font-size: 2rem; margin-bottom: 1rem;">${icon}</div>
        <p style="margin-bottom: 1.5rem; color: #333;">${message}</p>
        <button onclick="this.closest('.custom-alert-modal').remove()" 
                style="background: #4fc9c4; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.25rem; cursor: pointer;">
            OK
        </button>
    `;
    
    modal.appendChild(alertBox);
    document.body.appendChild(modal);
    
    // Auto-remover ap√≥s 5 segundos
    setTimeout(() => {
        if (modal.parentNode) {
            modal.remove();
        }
    }, 5000);
}

// Fun√ß√µes utilit√°rias globais para debug
window.cidadesDebug = {
    info: () => {
        console.log('üìä Informa√ß√µes do sistema de cidades:');
        console.log(`Carregado: ${cidadesSP.isLoaded}`);
        console.log(`Total de cidades: ${cidadesSP.cidades.length}`);
        console.log(`Cache ativo: ${!!cidadesSP.getCachedCidades()}`);
    },
    clearCache: () => cidadesSP.clearCache(),
    reload: () => cidadesSP.forceReload(),
    search: (query) => cidadesSP.searchCidade(query)
};






console.log('üéØ Sistema de cidades carregado! Use cidadesDebug.info() para debug');