// Script para gerenciar as cidades de S√£o Paulo usando API do IBGE
class CidadesSP {
    constructor() {
        this.cidades = [];
        this.selectElement = null;
        this.inputElement = null;
        this.isLoaded = false;
        this.cacheKey = 'cidades_sp_ibge';
        this.cacheExpiry = 24 * 60 * 60 * 1000; // 24 horas em millisegundos
    }

    // Verificar se h√° dados em cache v√°lidos
    getCachedCidades() {
        try {
            const cached = localStorage.getItem(this.cacheKey);
            if (cached) {
                const data = JSON.parse(cached);
                const now = new Date().getTime();
                
                if (now - data.timestamp < this.cacheExpiry) {
                    console.log('üì¶ Usando cidades do cache local (v√°lido por mais ' + 
                        Math.round((this.cacheExpiry - (now - data.timestamp)) / (1000 * 60 * 60)) + ' horas)');
                    return data.cidades;
                } else {
                    console.log('‚è∞ Cache expirado, buscando dados atualizados...');
                    localStorage.removeItem(this.cacheKey);
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Cache inv√°lido, removendo e buscando da API...');
            localStorage.removeItem(this.cacheKey);
        }
        return null;
    }

    // Salvar dados no cache
    setCachedCidades(cidades) {
        try {
            const data = {
                cidades: cidades,
                timestamp: new Date().getTime(),
                total: cidades.length
            };
            localStorage.setItem(this.cacheKey, JSON.stringify(data));
            console.log(`üíæ ${cidades.length} cidades salvas no cache local`);
        } catch (error) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel salvar no cache:', error.message);
        }
    }

    // Carregar as cidades da API do IBGE
    async loadCidades() {
        // Tentar usar cache primeiro
        const cachedCidades = this.getCachedCidades();
        if (cachedCidades && cachedCidades.length > 0) {
            this.cidades = cachedCidades;
            this.isLoaded = true;
            return this.cidades;
        }

        try {
            console.log('üèôÔ∏è Carregando cidades de S√£o Paulo via API IBGE...');
            console.log('üåê URL: https://servicodados.ibge.gov.br/api/v1/localidades/estados/35/municipios');
            
            // Mostrar loading se poss√≠vel
            this.showLoading();
            
            // Fazer request para API do IBGE (Estado de S√£o Paulo = c√≥digo 35)
            const response = await fetch('https://servicodados.ibge.gov.br/api/v1/localidades/estados/35/municipios', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                // Timeout de 10 segundos
                signal: AbortSignal.timeout(10000)
            });
            
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }
            
            const municipios = await response.json();
            
            if (!Array.isArray(municipios) || municipios.length === 0) {
                throw new Error('Dados inv√°lidos recebidos da API');
            }
            
            // Extrair apenas os nomes, ordenar alfabeticamente e remover duplicatas
            this.cidades = [...new Set(municipios.map(municipio => municipio.nome))].sort((a, b) => {
                return a.localeCompare(b, 'pt-BR', { sensitivity: 'base' });
            });
            
            // Salvar no cache
            this.setCachedCidades(this.cidades);
            
            this.isLoaded = true;
            this.hideLoading();
            
            console.log(`‚úÖ ${this.cidades.length} cidades carregadas com sucesso da API IBGE!`);
            console.log(`üìç Primeiras cidades: ${this.cidades.slice(0, 5).join(', ')}...`);
            
            return this.cidades;
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar da API IBGE:', error.message);
            this.hideLoading();
            
            // Fallback: usar lista est√°tica das principais cidades de SP
            console.log('üîÑ Usando lista de fallback com principais cidades...');
            this.cidades = [
                'Adamantina', '√Åguas de Lind√≥ia', 'Americana', 'Ara√ßatuba', 'Araraquara',
                'Araras', 'Assis', 'Atibaia', 'Barretos', 'Barueri', 'Bauru', 'Botucatu',
                'Bragan√ßa Paulista', 'Campinas', 'Campos do Jord√£o', 'Carapicu√≠ba',
                'Caraguatatuba', 'Casa Branca', 'Catanduva', 'Cosm√≥polis', 'Cotia',
                'Cruzeiro', 'Cubat√£o', 'Diadema', 'Ferraz de Vasconcelos', 'Franca',
                'Franco da Rocha', 'Guaratinguet√°', 'Guaruj√°', 'Guarulhos', 'Hortol√¢ndia',
                'Indaiatuba', 'Itanha√©m', 'Itapetininga', 'Itapevi', 'Itu', 'Jacare√≠',
                'Ja√∫', 'Jundia√≠', 'Leme', 'Limeira', 'Mar√≠lia', 'Mau√°', 'Mogi das Cruzes',
                'Mogi Gua√ßu', 'Osasco', 'Ourinhos', 'Paul√≠nia', 'Piracicaba', 'Praia Grande',
                'Presidente Prudente', 'Ribeir√£o Pires', 'Ribeir√£o Preto', 'Rio Claro',
                'Salto', 'Santa B√°rbara d\'Oeste', 'Santo Andr√©', 'Santos', 'S√£o Bernardo do Campo',
                'S√£o Caetano do Sul', 'S√£o Carlos', 'S√£o Jo√£o da Boa Vista', 'S√£o Jos√© dos Campos',
                'S√£o Paulo', 'S√£o Roque', 'S√£o Sebasti√£o', 'S√£o Vicente', 'Sorocaba',
                'Sumar√©', 'Suzano', 'Tabo√£o da Serra', 'Taubat√©', 'Ubatuba', 'Valinhos',
                'Vinhedo', 'Votuporanga'
            ];
            
            this.isLoaded = true;
            return this.cidades;
        }
    }

    // Mostrar indicador de loading
    showLoading() {
        const container = document.getElementById('destino-container');
        if (container) {
            let loadingDiv = container.querySelector('.loading-cidades');
            if (!loadingDiv) {
                loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading-cidades';
                loadingDiv.innerHTML = 'üîÑ Carregando cidades...';
                loadingDiv.style.cssText = 'color: #4fc9c4; font-size: 0.875rem; margin-bottom: 0.5rem;';
                container.insertBefore(loadingDiv, container.firstChild);
            }
        }
    }

    // Esconder indicador de loading
    hideLoading() {
        const container = document.getElementById('destino-container');
        if (container) {
            const loadingDiv = container.querySelector('.loading-cidades');
            if (loadingDiv) {
                loadingDiv.remove();
            }
        }
    }

    // Criar o select de cidades com placeholders inteligentes
    createCidadeSelect(targetElementId, placeholder = 'Selecione a cidade...') {
        const container = document.getElementById(targetElementId);
        if (!container) {
            console.error(`‚ùå Elemento ${targetElementId} n√£o encontrado!`);
            return;
        }

        // Verificar se j√° existe um select
        const existingSelect = container.querySelector('.cidade-select');
        if (existingSelect) {
            existingSelect.remove();
        }

        // Buscar o input existente
        const inputElement = container.querySelector('input[name="destino"], input#destino');
        if (!inputElement) {
            console.error('‚ùå Input de destino n√£o encontrado!');
            return;
        }

        console.log('‚úÖ Input encontrado:', inputElement);

        // Criar o select
        const select = document.createElement('select');
        select.id = `${targetElementId}_select`;
        select.className = 'cidade-select';
        select.style.cssText = `
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--border-color, #e5e5e5);
            border-radius: 0.5rem;
            font-size: 1rem;
            background: white;
            margin-bottom: 0.5rem;
            box-sizing: border-box;
        `;

        // Op√ß√£o padr√£o
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'üèôÔ∏è Escolha uma cidade ou digite o endere√ßo abaixo';
        select.appendChild(defaultOption);

        // Adicionar as cidades
        this.cidades.forEach(cidade => {
            const option = document.createElement('option');
            option.value = cidade;
            option.textContent = cidade;
            select.appendChild(option);
        });

        // Op√ß√£o "Outra cidade"
        const outraOption = document.createElement('option');
        outraOption.value = 'outra';
        outraOption.textContent = '‚úçÔ∏è Digitar endere√ßo manualmente';
        select.appendChild(outraOption);

        // Garantir que o input seja vis√≠vel com placeholder inicial
        inputElement.style.cssText = `
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--border-color, #e5e5e5);
            border-radius: 0.5rem;
            font-size: 1rem;
            background: white;
            box-sizing: border-box;
            display: block !important;
            visibility: visible !important;
            margin-top: 0.5rem;
        `;
        
        // Placeholder inicial neutro
        inputElement.placeholder = 'Endere√ßo ser√° preenchido automaticamente pela sele√ß√£o acima';

        // Inserir o select ANTES do input
        container.insertBefore(select, inputElement);
        
        // Armazenar refer√™ncias
        this.inputElement = inputElement;
        this.selectElement = select;
        
        // Event listener inteligente
        select.addEventListener('change', (e) => {
            const selectedValue = e.target.value;
            console.log('üèôÔ∏è Cidade selecionada:', selectedValue);
            
            if (selectedValue && selectedValue !== 'outra') {
                // Preencher o input com a cidade selecionada
                this.inputElement.value = selectedValue + ', SP';
                this.inputElement.placeholder = 'Complete com rua, n√∫mero e bairro se necess√°rio';
                this.inputElement.focus();
                
                // Posicionar cursor no final
                setTimeout(() => {
                    const length = this.inputElement.value.length;
                    this.inputElement.setSelectionRange(length, length);
                }, 100);
                
            } else if (selectedValue === 'outra') {
                // Limpar e focar no input para digita√ß√£o livre
                this.inputElement.value = '';
                this.inputElement.placeholder = 'Digite o endere√ßo completo: Rua, n¬∫, bairro, cidade';
                this.inputElement.focus();
                
            } else {
                // Op√ß√£o vazia selecionada - voltar ao estado inicial
                this.inputElement.value = '';
                this.inputElement.placeholder = 'Endere√ßo ser√° preenchido automaticamente pela sele√ß√£o acima';
            }
        });

        console.log('‚úÖ Select de cidades criado com placeholders inteligentes!');
        console.log('üìç Input vis√≠vel:', inputElement.style.display !== 'none');
    }

    // Inicializar o sistema
    async init(targetElementId, placeholder) {
        console.log('üöÄ Inicializando sistema de cidades...');
        try {
            await this.loadCidades();
            this.createCidadeSelect(targetElementId, placeholder);
            console.log('‚úÖ Sistema de cidades inicializado com sucesso!');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar sistema de cidades:', error);
        }
    }

    // M√©todo para buscar cidade por nome (para autocomplete futuro)
    searchCidade(query) {
        if (!query || query.length < 2) return [];
        
        const queryLower = query.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        return this.cidades.filter(cidade => {
            const cidadeLower = cidade.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
            return cidadeLower.includes(queryLower);
        });
    }

    // Validar se a cidade existe
    isValidCidade(cidade) {
        return this.cidades.some(c => 
            c.toLowerCase() === cidade.toLowerCase()
        );
    }

    // Limpar cache (m√©todo utilit√°rio)
    clearCache() {
        localStorage.removeItem(this.cacheKey);
        console.log('üóëÔ∏è Cache de cidades limpo');
    }

    // For√ßar reload da API
    async forceReload() {
        this.clearCache();
        this.isLoaded = false;
        await this.loadCidades();
        console.log('üîÑ Dados recarregados da API');
    }
}

// Inst√¢ncia global
const cidadesSP = new CidadesSP();

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM carregado - verificando se √© p√°gina de agendamento...');
    
    // Verificar se estamos na p√°gina de agendamento
    const targetElement = document.querySelector('#destino-container');
    if (targetElement) {
        console.log('üéØ P√°gina de agendamento detectada!');
        
        // Aguardar um pouco para garantir que tudo foi carregado
        setTimeout(() => {
            cidadesSP.init('destino-container', 'üèôÔ∏è Selecione a cidade de destino...');
        }, 500);
    } else {
        console.log('‚ÑπÔ∏è N√£o √© uma p√°gina de agendamento, sistema de cidades n√£o ser√° carregado');
    }
});

// Fun√ß√£o para validar formul√°rio (opcional)
function validateDestinoForm() {
    const destinoInput = document.getElementById('destino');
    if (destinoInput && destinoInput.value.trim() === '') {
        // Criar modal customizado em vez de alert
        showCustomAlert('Por favor, selecione uma cidade ou digite o endere√ßo de destino!', 'warning');
        destinoInput.focus();
        return false;
    }
    return true;
}

// Fun√ß√£o para mostrar alerta customizado
function showCustomAlert(message, type = 'info') {
    // Criar modal simples
    const modal = document.createElement('div');
    modal.className = 'custom-alert-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    `;
    
    const alertBox = document.createElement('div');
    alertBox.style.cssText = `
        background: white;
        padding: 2rem;
        border-radius: 0.5rem;
        max-width: 400px;
        text-align: center;
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.2);
    `;
    
    const icon = type === 'warning' ? '‚ö†Ô∏è' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    
    alertBox.innerHTML = `
        <div style="font-size: 2rem; margin-bottom: 1rem;">${icon}</div>
        <p style="margin-bottom: 1.5rem; color: #333;">${message}</p>
        <button onclick="this.closest('.custom-alert-modal').remove()" 
                style="background: #4fc9c4; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.25rem; cursor: pointer;">
            OK
        </button>
    `;
    
    modal.appendChild(alertBox);
    document.body.appendChild(modal);
    
    // Auto-remover ap√≥s 5 segundos
    setTimeout(() => {
        if (modal.parentNode) {
            modal.remove();
        }
    }, 5000);
}

// Fun√ß√µes utilit√°rias globais para debug
window.cidadesDebug = {
    info: () => {
        console.log('üìä Informa√ß√µes do sistema de cidades:');
        console.log(`Carregado: ${cidadesSP.isLoaded}`);
        console.log(`Total de cidades: ${cidadesSP.cidades.length}`);
        console.log(`Cache ativo: ${!!cidadesSP.getCachedCidades()}`);
    },
    clearCache: () => cidadesSP.clearCache(),
    reload: () => cidadesSP.forceReload(),
    search: (query) => cidadesSP.searchCidade(query)
};

console.log('üéØ Sistema de cidades carregado com placeholders inteligentes!');