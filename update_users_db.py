import sqlite3
import os
from datetime import datetime

def atualizar_usuarios():
    try:
        # Caminho do banco
        db_path = os.path.join(os.getcwd(), 'db', 'transporte_pacientes.db')
        
        if not os.path.exists(db_path):
            print("‚ùå Banco de dados n√£o encontrado!")
            return
        
        # Conectar ao banco
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar se a coluna data_cadastro existe
        cursor.execute("PRAGMA table_info(usuarios)")
        colunas = [coluna[1] for coluna in cursor.fetchall()]
        
        if 'data_cadastro' not in colunas:
            print("üîÑ Adicionando coluna 'data_cadastro' na tabela usuarios...")
            
            # Adicionar coluna sem valor padr√£o primeiro
            cursor.execute("ALTER TABLE usuarios ADD COLUMN data_cadastro DATETIME")
            
            # Atualizar registros existentes com a data atual
            now = datetime.now().isoformat()
            cursor.execute("UPDATE usuarios SET data_cadastro = ? WHERE data_cadastro IS NULL", (now,))
            
            conn.commit()
            print("‚úÖ Coluna 'data_cadastro' adicionada com sucesso!")
        else:
            print("‚ÑπÔ∏è Coluna 'data_cadastro' j√° existe!")
        
        # Verificar e atualizar tipos de usu√°rio
        print("üîÑ Verificando tipos de usu√°rio...")
        cursor.execute("SELECT id, tipo_usuario FROM usuarios")
        usuarios = cursor.fetchall()
        
        updated_count = 0
        for user_id, tipo in usuarios:
            if tipo == 'operador':
                cursor.execute("UPDATE usuarios SET tipo_usuario = 'atendente' WHERE id = ?", (user_id,))
                print(f"üîÑ Usu√°rio {user_id}: 'operador' ‚Üí 'atendente'")
                updated_count += 1
        
        if updated_count > 0:
            print(f"‚úÖ {updated_count} usu√°rio(s) atualizado(s)")
        else:
            print("‚ÑπÔ∏è Nenhum tipo de usu√°rio precisou ser atualizado")
        
        conn.commit()
        
        # Verificar se existe usu√°rio administrador
        cursor.execute("SELECT COUNT(*) FROM usuarios WHERE tipo_usuario = 'administrador'")
        admin_count = cursor.fetchone()[0]
        
        if admin_count == 0:
            print("‚ö†Ô∏è Nenhum administrador encontrado! Atualizando usu√°rio admin...")
            cursor.execute("UPDATE usuarios SET tipo_usuario = 'administrador' WHERE username = 'admin'")
            conn.commit()
            print("‚úÖ Usu√°rio 'admin' promovido para administrador")
        
        # Criar usu√°rio supervisor se n√£o existir
        cursor.execute("SELECT COUNT(*) FROM usuarios WHERE tipo_usuario = 'supervisor'")
        supervisor_count = cursor.fetchone()[0]
        
        if supervisor_count == 0:
            print("üîÑ Criando usu√°rio supervisor...")
            
            # Verificar se j√° existe username 'supervisor'
            cursor.execute("SELECT COUNT(*) FROM usuarios WHERE username = 'supervisor'")
            if cursor.fetchone()[0] == 0:
                # Importar aqui para evitar problemas de contexto
                try:
                    from werkzeug.security import generate_password_hash
                    
                    supervisor_hash = generate_password_hash('supervisor123')
                    now = datetime.now().isoformat()
                    
                    cursor.execute("""
                        INSERT INTO usuarios (username, password_hash, nome_completo, email, tipo_usuario, ativo, data_cadastro)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, ('supervisor', supervisor_hash, 'Supervisor do Sistema', 'supervisor@cosmopolis.sp.gov.br', 'supervisor', 1, now))
                    
                    conn.commit()
                    print("‚úÖ Usu√°rio supervisor criado!")
                    print("üìù Login: supervisor / supervisor123")
                    
                except ImportError:
                    print("‚ö†Ô∏è N√£o foi poss√≠vel criar usu√°rio supervisor (werkzeug n√£o dispon√≠vel)")
                    print("üí° Execute o sistema uma vez e crie manualmente")
            else:
                print("‚ÑπÔ∏è Username 'supervisor' j√° existe")
        else:
            print("‚ÑπÔ∏è J√° existe usu√°rio supervisor")
        
        # Mostrar resumo final
        print("\nüìä RESUMO FINAL:")
        cursor.execute("SELECT tipo_usuario, COUNT(*) FROM usuarios GROUP BY tipo_usuario")
        tipos = cursor.fetchall()
        
        for tipo, count in tipos:
            emoji = {'administrador': 'üëë', 'supervisor': 'üë®‚Äçüíº', 'atendente': 'üéß'}.get(tipo, 'üë§')
            print(f"{emoji} {tipo.title()}: {count} usu√°rio(s)")
        
        conn.close()
        print("\n‚úÖ Atualiza√ß√£o de usu√°rios conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar usu√°rios: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    atualizar_usuarios()